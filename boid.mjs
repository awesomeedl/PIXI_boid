import{Application as i,Renderer as t,Sprite as o,Texture as e,utils as r}from"pixi";import"victor";class s{constructor(i,t){this.flock=new Array(i),this.sprites=new Array(i),this.pixiRenderer=t.renderer;for(let r=0;r<i;r++){this.flock[r]=new n(Victor().randomize(Victor(0,0),Victor(this.pixiRenderer.width,this.pixiRenderer.height)));let i=new o(e.from("Arrow.png"));i.scale.set(.3),i.anchor.set(.5),t.stage.addChild(i),this.sprites[r]=i}}run(){for(let i=0;i<this.flock.length;i++){let t=this.flock[i],o=this.sprites[i],e=t.run(this.flock);t.velocity.add(e).normalize().multiplyScalar(3),t.position.add(t.velocity),o.rotation=t.velocity.horizontalAngle()+.5*Math.PI,t.position.x<0&&(t.position.x=this.pixiRenderer.width),t.position.y<0&&(t.position.y=this.pixiRenderer.height),t.position.x>this.pixiRenderer.width&&(t.position.x=0),t.position.y>this.pixiRenderer.height&&(t.position.y=0),o.x=t.position.x,o.y=t.position.y;let s=t.velocity.clone().normalize();o.tint=r.rgb2hex([0,Math.cos(s.x),Math.cos(s.y)])}}}class n{constructor(i){this.position=i,this.velocity=Victor().randomize(Victor(-3,-3),Victor(3,3))}run(i){let t=this.findNeighbor(i),o=this.cohesion(t).multiplyScalar(1),e=this.separation(t).multiplyScalar(500),r=this.alignment(t).multiplyScalar(15);return this.acceleration=o.add(e).add(r),this.acceleration.lengthSq()>.010000000000000002&&this.acceleration.normalize().multiplyScalar(.1),this.acceleration}findNeighbor(i){return i.filter((i=>i!==this&&this.position.distanceSq(i.position)<1e4))}cohesion(i){return i.length>0?i.reduce(((i,t)=>i.add(t.position)),Victor().zero()).divideScalar(i.length).subtract(this.position):Victor().zero()}alignment(i){return i.length>0?i.reduce(((i,t)=>i.add(t.velocity)),Victor()).divideScalar(i.length).subtract(this.velocity).mix(this.velocity,.2):this.velocity}separation(i){return i.filter((i=>this.position.distanceSq(i.position)<2500)).reduce(((i,t)=>i.add(this.position.clone().subtract(t.position).divideScalar(this.position.distanceSq(t.position)))),Victor().zero())}}export{s as Flock,n as Boid};